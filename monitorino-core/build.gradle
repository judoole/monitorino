buildscript {
    repositories {
        maven { url "http://repo.springsource.org/plugins-release" }
    }
    dependencies {
        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.3")
        classpath("org.springframework.build.gradle:docbook-reference-plugin:0.2.6")
    }
}

apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'propdeps'
apply plugin: 'signing'

group = 'com.github.judoole'
version = '0.2'
ext.packaging = 'jar'

def isDevBuild = false
def sonatypeRepositoryUrl

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'
    compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    compile group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.3'
    optional group: 'org.springframework', name: 'spring-web', version: '3.1.2.RELEASE'
    optional group: 'org.springframework', name: 'spring-webmvc', version: '3.1.2.RELEASE'
    optional group: 'cglib', name: 'cglib', version: '2.2.2'
    testCompile group: 'junit', name: 'junit-dep', version: '4.10'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5-rc1'
    testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.0.5'
}

signing {
    sign configurations.archives
}

uploadArchives {
    doFirst {
        repositories {
            if (isDevBuild) {
                mavenLocal()
            } else {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: sonatypeRepositoryUrl) {
                        authentication(userName: sonatypeUsername, password: sonatypePassword)
                    }

                    pom.project {
                        name 'Monitorino'
                        packaging 'jar'
                        artifactId 'monitorino'
                        description 'This projects goal is to deliver helper classes for easily monitoring your Java Webapp.'
                        url 'http://judoole.github.com/monitorino/'

                        scm {
                            url 'https://github.com/judoole/monitorino'
                            connection 'scm:git:git://github.com/judoole/monitorino.git'
                            developerConnection 'scm:git:git://github.com/judoole/monitorino.git'
                        }

                        licenses {
                            license {
                                name 'BSD License'
                                url 'http://www.opensource.org/licenses/bsd-license.php'
                                distribution 'repo'
                            }
                        }
                        developers {
                            developer {
                                id 'judoole'
                                name 'Ole Christian Langfjaeran'
                                url 'https://github.com/judoole'
                            }
                        }
                    }
                }
            }
        }
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(snapshot)) {
        version += '-SNAPSHOT'
        sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
    } else if(taskGraph.hasTask(stage)) {
        sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    } else {
        version += '-SNAPSHOT'
        isDevBuild = true;
    }
}

task snapshot(description: "Uploads snapshot to Sonatype", dependsOn: uploadArchives) {
}

task stage(description: "Stages version to Sonatype", dependsOn: uploadArchives) {
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}
